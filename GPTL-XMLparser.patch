diff -Naurp GPTL/gptl.c patchvGPTL/gptl.c
--- GPTL/gptl.c	2014-07-30 05:16:12.362605619 -0700
+++ patchvGPTL/gptl.c	2014-07-30 05:49:35.894605380 -0700
@@ -396,7 +396,10 @@ int GPTLinitialize (void)
   int t;          /* thread index */
   double t1, t2;  /* returned from underlying timer */
   static const char *thisfunc = "GPTLinitialize";
-
+#ifdef HAVE_LIBXML2
+  //Initialize xml parser function
+  GPTLxmlparser();
+#endif
   if (initialized)
     return GPTLerror ("%s: has already been called\n", thisfunc);
 
diff -Naurp GPTL/macros.make.bluegene patchvGPTL/macros.make.bluegene
--- GPTL/macros.make.bluegene	2014-07-30 05:16:12.362605619 -0700
+++ patchvGPTL/macros.make.bluegene	2014-07-30 05:49:35.894605380 -0700
@@ -165,3 +165,12 @@ ifeq ($(HAVE_MPI),yes)
     HAVE_IARGCGETARG = no
   endif
 endif
+
+#If LibXML2 is present, we can specify instrumentation details in xml file dynamically without 
+#recompiling source
+HAVE_LIBXML2 = yes
+  ifeq ($(HAVE_LIBXML2),yes)
+    LIBXML2_INCFLAGS = -I/usr/include/libxml2
+    LIBXML2_LIBFLAGS = -L/usr/local/lib64 -lxml2
+  endif
+
diff -Naurp GPTL/macros.make.lahey patchvGPTL/macros.make.lahey
--- GPTL/macros.make.lahey	2014-07-30 05:16:12.362605619 -0700
+++ patchvGPTL/macros.make.lahey	2014-07-30 05:49:35.894605380 -0700
@@ -152,6 +152,14 @@ ifeq ($(HAVE_MPI),yes)
   endif
 endif
 
+#If LibXML2 is present, we can specify instrumentation details in xml file dynamically without 
+#recompiling source
+HAVE_LIBXML2 = yes
+  ifeq ($(HAVE_LIBXML2),yes)
+    LIBXML2_INCFLAGS = -I/usr/include/libxml2
+    LIBXML2_LIBFLAGS = -L/usr/local/lib64 -lxml2
+  endif
+
 # Whether system functions backtrace() and backtrace_symbols() exist. Setting HAVE_BACKTRACE=yes
 # will enable auto-generation of function name when auto-profiling and GPTLdopr_memusage has been
 # enabled at run-time. If HAVE_BACKTRACE=no, function address will be printed instead.
diff -Naurp GPTL/macros.make.linux patchvGPTL/macros.make.linux
--- GPTL/macros.make.linux	2014-07-30 05:16:12.362605619 -0700
+++ patchvGPTL/macros.make.linux	2014-07-30 05:49:35.894605380 -0700
@@ -152,6 +152,14 @@ ifeq ($(HAVE_MPI),yes)
   endif
 endif
 
+#If LibXML2 is present, we can specify instrumentation details in xml file dynamically without 
+#recompiling source
+HAVE_LIBXML2 = yes
+  ifeq ($(HAVE_LIBXML2),yes)
+    LIBXML2_INCFLAGS = -I/usr/include/libxml2
+    LIBXML2_LIBFLAGS = -L/usr/local/lib64 -lxml2
+  endif
+
 # Whether system functions backtrace() and backtrace_symbols() exist. Setting HAVE_BACKTRACE=yes
 # will enable auto-generation of function name when auto-profiling and GPTLdopr_memusage has been
 # enabled at run-time. If HAVE_BACKTRACE=no, function address will be printed instead.
diff -Naurp GPTL/macros.make.macos patchvGPTL/macros.make.macos
--- GPTL/macros.make.macos	2014-07-30 05:16:12.362605619 -0700
+++ patchvGPTL/macros.make.macos	2014-07-30 05:49:35.894605380 -0700
@@ -153,6 +153,14 @@ ifeq ($(HAVE_MPI),yes)
   endif
 endif
 
+#If LibXML2 is present, we can specify instrumentation details in xml file dynamically without 
+#recompiling source
+HAVE_LIBXML2 = yes
+  ifeq ($(HAVE_LIBXML2),yes)
+    LIBXML2_INCFLAGS = -I/usr/include/libxml2
+    LIBXML2_LIBFLAGS = -L/usr/local/lib64 -lxml2
+  endif
+
 # Whether system functions backtrace() and backtrace_symbols() exist. Setting HAVE_BACKTRACE=yes
 # will enable auto-generation of function name when auto-profiling and GPTLdopr_memusage has been
 # enabled at run-time. If HAVE_BACKTRACE=no, function address will be printed instead.
diff -Naurp GPTL/macros.make.pgi patchvGPTL/macros.make.pgi
--- GPTL/macros.make.pgi	2014-07-30 05:16:12.362605619 -0700
+++ patchvGPTL/macros.make.pgi	2014-07-30 05:49:35.894605380 -0700
@@ -152,6 +152,14 @@ ifeq ($(HAVE_MPI),yes)
   endif
 endif
 
+#If LibXML2 is present, we can specify instrumentation details in xml file dynamically without 
+#recompiling source
+HAVE_LIBXML2 = yes
+  ifeq ($(HAVE_LIBXML2),yes)
+    LIBXML2_INCFLAGS = -I/usr/include/libxml2
+    LIBXML2_LIBFLAGS = -L/usr/local/lib64 -lxml2
+  endif
+
 # Whether system functions backtrace() and backtrace_symbols() exist. Setting HAVE_BACKTRACE=yes
 # will enable auto-generation of function name when auto-profiling and GPTLdopr_memusage has been
 # enabled at run-time. If HAVE_BACKTRACE=no, function address will be printed instead.
diff -Naurp GPTL/macros.make.xeon patchvGPTL/macros.make.xeon
--- GPTL/macros.make.xeon	2014-07-30 05:16:12.362605619 -0700
+++ patchvGPTL/macros.make.xeon	2014-07-30 05:49:35.894605380 -0700
@@ -152,6 +152,14 @@ ifeq ($(HAVE_MPI),yes)
   endif
 endif
 
+#If LibXML2 is present, we can specify instrumentation details in xml file dynamically without 
+#recompiling source
+HAVE_LIBXML2 = yes
+  ifeq ($(HAVE_LIBXML2),yes)
+    LIBXML2_INCFLAGS = -I/usr/include/libxml2
+    LIBXML2_LIBFLAGS = -L/usr/local/lib64 -lxml2
+  endif
+
 # Whether system functions backtrace() and backtrace_symbols() exist. Setting HAVE_BACKTRACE=yes
 # will enable auto-generation of function name when auto-profiling and GPTLdopr_memusage has been
 # enabled at run-time. If HAVE_BACKTRACE=no, function address will be printed instead.
diff -Naurp GPTL/macros.make.xeonphi patchvGPTL/macros.make.xeonphi
--- GPTL/macros.make.xeonphi	2014-07-30 05:16:12.362605619 -0700
+++ patchvGPTL/macros.make.xeonphi	2014-07-30 05:49:35.894605380 -0700
@@ -152,6 +152,14 @@ ifeq ($(HAVE_MPI),yes)
   endif
 endif
 
+#If LibXML2 is present, we can specify instrumentation details in xml file dynamically without 
+#recompiling source
+HAVE_LIBXML2 = yes
+  ifeq ($(HAVE_LIBXML2),yes)
+    LIBXML2_INCFLAGS = -I/usr/include/libxml2
+    LIBXML2_LIBFLAGS = -L/usr/local/lib64 -lxml2
+  endif
+
 # Whether system functions backtrace() and backtrace_symbols() exist. Setting HAVE_BACKTRACE=yes
 # will enable auto-generation of function name when auto-profiling and GPTLdopr_memusage has been
 # enabled at run-time. If HAVE_BACKTRACE=no, function address will be printed instead.
diff -Naurp GPTL/Makefile patchvGPTL/Makefile
--- GPTL/Makefile	2014-07-30 05:16:12.358605619 -0700
+++ patchvGPTL/Makefile	2014-07-30 05:49:35.894605380 -0700
@@ -7,8 +7,8 @@ else
 endif
 
 null =
-OBJS = gptl.o util.o get_memusage.o print_memusage.o gptl_papi.o pmpi.o getoverhead.o \
-       hashstats.o memstats.o pr_summary.o print_rusage.o
+OBJS = gptl.o util.o get_memusage.o print_memusage.o gptl_papi.o pmpi.o setxmlConfig.o \
+       getoverhead.o hashstats.o memstats.o pr_summary.o print_rusage.o
 
 ifeq ($(ENABLE_PMPI),yes)
   CFLAGS += -DENABLE_PMPI -DMPI_STATUS_SIZE_IN_INTS=$(MPI_STATUS_SIZE_IN_INTS)
@@ -162,6 +162,7 @@ gptl_papi.o: gptl.h private.h
 process_namelist.o: process_namelist.F90 gptl.inc
 gptlf.o: gptlf.F90
 pmpi.o: gptl.h private.h
+setxmlConfig.o: gptl.h private.h
 getoverhead.o: private.h
 hashstats.o: private.h
 memstats.o: private.h
diff -Naurp GPTL/Makefile.in patchvGPTL/Makefile.in
--- GPTL/Makefile.in	2014-07-30 05:16:12.358605619 -0700
+++ patchvGPTL/Makefile.in	2014-07-30 05:49:35.894605380 -0700
@@ -6,7 +6,7 @@ LIBDIR   = @prefix@/lib
 INCDIR   = @prefix@/include
 MANDIR   = @prefix@/man/man3
 OBJS     = f_wrappers.o gptl.o util.o threadutil.o get_memusage.o \
-           print_memusage.o gptl_papi.o
+           print_memusage.o gptl_papi.o setxmlConfig.o
 AR       = @AR@
 
 @SET_MAKE@
@@ -41,3 +41,4 @@ gptl.o: gptl.c gptl.h private.h
 util.o: util.c gptl.h private.h
 threadutil.o: threadutil.c gptl.h private.h
 gptl_papi.o: gptl_papi.c gptl.h private.h
+setxmlConfig.o: gptl.h private.h
diff -Naurp GPTL/setxmlConfig.c patchvGPTL/setxmlConfig.c
--- GPTL/setxmlConfig.c	1969-12-31 16:00:00.000000000 -0800
+++ patchvGPTL/setxmlConfig.c	2014-07-30 05:49:35.894605380 -0700
@@ -0,0 +1,256 @@
+/*
+** Author: Ramnath Sai (ramnath.sagar@gmail.com)
+**
+** XML parser to parse the xml config file and set the profiling parameters
+*/
+
+
+
+#include <stdio.h>
+#include <string.h>
+#include <libxml/parser.h>
+
+#ifdef HAVE_LIBXML2
+#include "setxmlConfig.h"
+
+
+
+static void setDefault()
+{
+	int ret;
+	ret = GPTLsetoption(GPTLstacksize, 128);
+	ret = GPTLsetoption(GPTLoverhead, 1);
+	ret = GPTLsetutr(1); /*Use gettimeofday */
+}
+
+static inline void setMPIOptions(xmlDocPtr doc, xmlNodePtr cur)
+{
+	xmlChar *value;
+	//If MPI is enabled
+	if (!strcmp(xmlGetProp(cur, "enabled"),"yes"))
+		printf("MPI is enabled\n");//value = xmlGetProp(cur, "enabled"); 
+
+}
+
+static void setOpenMPOptions(xmlDocPtr doc, xmlNodePtr cur)
+{
+	xmlChar *value;
+	//Check if OpenMP is enabled
+	if (!strcmp(xmlGetProp(cur, "enabled"), "yes"))
+		printf("OpenMP is enabled\n");
+
+}
+
+
+static void setPthreadOptions(xmlDocPtr doc , xmlNodePtr cur )
+{
+	xmlChar *value;
+	//Check if Pthreads is enabled
+	if (!strcmp(xmlGetProp(cur, "enabled"), "yes"))
+		printf("Pthreads is enabled\n");
+
+}
+
+/*
+Function to set the call stack depth using GPTLsetoption
+Input:
+	xmlNodePtr cur which points to the current Node in the xml tree
+*/
+
+static void setCallStackDepth(xmlNodePtr cur)
+{
+	xmlChar *strvalue;
+	int value;
+	
+	if (!strcmp(xmlGetProp(cur, "enabled"),"yes"))
+	{
+		strvalue = xmlGetProp(cur, "depth");
+		value = atoi(strvalue+strlen(strvalue)-1);
+		if (GPTLsetoption(GPTLstacksize,value))
+			printf("Warning: GPTLstacksize could not be set\n");
+	}
+}
+
+/*
+Function to find which timer to use and set the GPTL timer
+Input :
+	xmlNodePtr cur which points to the current Node in the xml tree 
+*/
+
+static void setTimer(xmlNodePtr cur)
+{
+	xmlChar *value;
+	int ret, timer;
+	value = xmlGetProp(cur, "option");
+	
+	timer = str2time (value);
+	//If Timer exits use it , else use the default - gettimeofday
+	ret = (timer > 0 ) ? timer : 1;
+	//printf("ret valu=%d\n",ret);
+	
+	GPTLsetutr(ret);
+
+}
+
+/*
+Function which is used to convert the "String counter" to an "Int counter". 
+Passes the String name to str2counter and gets the "number" as defined in papi.h
+
+Input:
+	A String of type xmlChar *
+	Two indices which is used to keep track of the position in the String - cur_pos, prev_pos
+*/
+
+static int findCounterfromString(xmlChar *Str, int cur_pos, int prev_pos)
+{
+	char *counter;
+	int counter_number;
+	counter = (char*)malloc((cur_pos-prev_pos+1)*sizeof(char));
+
+	strncpy(counter, Str+prev_pos,(cur_pos-prev_pos));
+	counter[cur_pos-prev_pos]='\0';
+	
+	counter_number = str2counter(counter);
+	
+	if(GPTLsetoption(counter_number,1))
+		printf("Warning: PAPI counter %s could not be set\n",counter);
+
+	free(counter);
+
+	return (cur_pos + 1);
+}
+
+/*
+Function to set the PAPI counters in GPTL
+Input:
+	xmlDocPtr
+	xmlNodePtr 
+
+*/
+
+static void setPAPIcounters(xmlDocPtr doc, xmlNodePtr cur )
+{
+	xmlChar *value;
+	char *counter_str;
+	int i;
+	int cur_ptr = 0, prev_ptr = 0;
+	if(! strcmp( xmlGetProp(cur, "enabled"),"yes"))
+	{
+		value = xmlNodeListGetString(doc, cur->xmlChildrenNode, 1);
+		for(i = 0;value[i] != '\0'; i++)
+		{
+			cur_ptr = i;
+			if(value[i] == ',')
+				//Pass the curent position, previous position and the string
+				prev_ptr = findCounterfromString(value, cur_ptr, prev_ptr);
+		}
+		//Last substring..
+		prev_ptr = findCounterfromString(value, cur_ptr+1, prev_ptr);
+	}
+}
+
+
+/*
+	xmlparser is a function which will parse the input xml file
+	and set the GPTLoptions and GPTLsetur. One can specify the 
+	events in the xml file.
+
+	xml file has to be exported to GPTL_CONFIG_FILE environment variable
+	
+*/
+
+int GPTLxmlparser(void)
+{
+	xmlDocPtr doc;
+	xmlNodePtr cur;
+	
+	FILE *in;
+	char *buffer;
+	long numBytes;
+	
+	char const *gptl_config_filename = getenv("GPTL_CONFIG_FILE");
+
+	if (gptl_config_filename == NULL)
+	{
+		printf("Warning.. GPTL config file not specified. Use GPTL_CONFIG_FILE env variable\n");
+		printf("Using default options\n");
+		setDefault();
+		return 1;
+	}
+
+	if ( (in = fopen(gptl_config_filename, "r")) == NULL)
+	{
+		printf("Warning:.. Config file %s not found.\n",gptl_config_filename);
+		printf("Using default options\n");
+		setDefault();
+		return 1;
+	}
+
+	//Read the xml file into memory
+	fseek(in, 0L, SEEK_END);
+	numBytes = ftell(in);
+
+	fseek(in, 0L, SEEK_SET);
+
+	buffer = (char *)calloc(numBytes, sizeof(char));
+
+	if(buffer == NULL)
+		return 1;
+
+	fread(buffer, sizeof(char), numBytes, in);
+
+	fclose(in);
+
+	//Now parse the Memory which has the xml tags
+	if( (doc = xmlParseMemory(buffer, numBytes)) == NULL)
+	{
+		fprintf(stderr, "Cannot read the XML config parameters..\n Will abort now\n");
+		exit(0);
+	}
+	
+	if ( (cur = xmlDocGetRootElement(doc)) == NULL)
+	{
+		fprintf(stderr, "XML Config File is empty\n.. Will abort now");
+		xmlFreeDoc(doc);
+		exit(0);
+	}
+
+	cur = cur->xmlChildrenNode;
+	while(cur != NULL)
+	{
+		//printf("The 1st value is %s\n",cur->name);
+		if((!xmlStrcmp(cur->name, (const xmlChar *)"mpi")))
+			setMPIOptions(doc, cur);
+
+		else if ((!xmlStrcmp(cur->name, (const xmlChar *)"openmp")))
+			setOpenMPOptions(doc, cur);
+		
+		else if((!xmlStrcmp(cur->name, (const xmlChar *)"pthreads")))
+			setPthreadOptions(doc, cur);
+
+		else if((!xmlStrcmp(cur->name, (const xmlChar *)"callers")))
+			setCallStackDepth(cur);
+
+		else if((!xmlStrcmp(cur->name, (const xmlChar *)"PAPI")))
+			setPAPIcounters(doc, cur);
+	
+		else if ((!xmlStrcmp(cur->name, (const xmlChar *)"timer")))
+			setTimer(cur);
+		else if((!xmlStrcmp(cur->name, (const xmlChar *)"overhead")))
+			GPTLsetoption(GPTLoverhead, 1);//parseEstats(doc, cur);
+				
+		else if ((!xmlStrcmp(cur->name, (const xmlChar *)"text")) || (!xmlStrcmp(cur->name, (const xmlChar *)"comment")))
+		{	/*Do nothing;*/}
+		else
+			printf("Unrecognized option in XML file %s\n",cur->name);
+		
+		cur = cur->next;
+	}
+
+	xmlFreeDoc(doc);
+	free(buffer);
+	
+	return 0;
+		
+}
+#endif
diff -Naurp GPTL/setxmlConfig.h patchvGPTL/setxmlConfig.h
--- GPTL/setxmlConfig.h	1969-12-31 16:00:00.000000000 -0800
+++ patchvGPTL/setxmlConfig.h	2014-07-30 05:49:35.894605380 -0700
@@ -0,0 +1,26 @@
+/*
+**
+** Authors: Ramnath Sai (ramnath.sagar@gmail.com)
+**
+** XML parser header to parse the xml config file and set the profiling parameters
+*/
+
+
+#ifndef PARSE_H
+#define PARSE_H
+
+#include <stdio.h>
+#include <string.h>
+
+#ifdef HAVE_PAPI
+#include <papi.h>
+#endif
+
+
+
+#include <libxml/parser.h>
+#include "gptl.h"
+#include "private.h"
+
+
+#endif
diff -Naurp GPTL/suggestions patchvGPTL/suggestions
--- GPTL/suggestions	2014-07-30 05:16:12.366605619 -0700
+++ patchvGPTL/suggestions	2014-07-30 05:49:35.894605380 -0700
@@ -4133,7 +4133,7 @@ if ${ac_cv_lib_pthread_pthread_mutex_ini
   $as_echo_n "(cached) " >&6
 else
   ac_check_lib_save_LIBS=$LIBS
-LIBS="-lpthread  $LIBS"
+LIBS="-lpthread -lxml2  $LIBS"
 cat confdefs.h - <<_ACEOF >conftest.$ac_ext
 /* end confdefs.h.  */
 
